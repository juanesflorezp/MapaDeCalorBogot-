# -*- coding: utf-8 -*-

import streamlit as st
import googlemaps
import pandas as pd
import time
from dotenv import load_dotenv
from streamlit_folium import folium_static, st_folium
import folium
from folium.plugins import HeatMap
import os

# Configuraci칩n de la p치gina
st.set_page_config(layout="wide")
st.title("游늸 Mapa de Lugares Espec칤ficos en Bogot치")

# Cargar API Key
load_dotenv()
API_KEY = "AIzaSyAfKQcxysKHp0qSrKIlBj6ZXnF1x-McWtw" 

if not API_KEY:
    st.error("API Key no encontrada. Por favor define GOOGLE_MAPS_API_KEY en tu archivo .env")
    st.stop()

gmaps = googlemaps.Client(key=API_KEY)

# Configuraci칩n fija para Bogot치
UBICACION_BOGOTA = [4.60971, -74.08175]
RADIO_DEFAULT = 1000  # Radio por defecto aumentado para mejor cobertura

# Lista de estaciones de Transmilenio (puedes agregar m치s)
ESTACIONES_TRANSMILENIO = [
    "Portal 80", "Portal Am칠ricas", "Portal Eldorado", "Portal Norte",
    "Portal Suba", "Portal Sur", "Portal Tunal", "Calle 100",
    "Calle 72", "Calle 45", "Calle 26", "Calle 19", "Calle 22",
    "Museo del Oro", "Av. Jim칠nez", "Universidades", "Santander",
    "H칠roes", "Paloquemao", "Restrepo", "Alcal치", "Calle 127",
    "Tober칤n", "Usaqu칠n", "Cedritos", "Pepe Sierra", "Calle 146"
]

# Configuraci칩n de la UI
with st.sidebar:
    st.header("Configuraci칩n de B칰squeda")
    radio = st.slider("Radio de b칰squeda (metros):", 100, 5000, RADIO_DEFAULT, 100)
    opcion_busqueda = st.radio("M칠todo de b칰squeda:", ["Usar direcci칩n escrita", "Usar ubicaci칩n del mapa"])
    direccion = st.text_input("Ingresa una direcci칩n en Bogot치:", "")

# Funci칩n para buscar estaciones de Transmilenio
def buscar_transmilenio(location, radius):
    try:
        resultados = []
        # B칰squeda por nombres conocidos
        for estacion in ESTACIONES_TRANSMILENIO:
            time.sleep(0.1)  # Peque침a pausa para evitar l칤mites de la API
            try:
                places_result = gmaps.places(
                    query=f"Estaci칩n {estacion} Transmilenio",
                    location=location,
                    radius=radius
                )
                resultados.extend(places_result.get("results", []))
            except:
                continue
        
        # B칰squeda gen칠rica
        try:
            places_result = gmaps.places_nearby(
                location=location,
                radius=radius,
                type="transit_station",
                keyword="Transmilenio"
            )
            resultados.extend(places_result.get("results", []))
        except:
            pass
        
        # Eliminar duplicados
        seen = set()
        return [x for x in resultados if x['place_id'] not in seen and not seen.add(x['place_id'])]
    except Exception as e:
        st.warning(f"Error al buscar Transmilenio: {str(e)}")
        return []

# Funci칩n para buscar oficinas (mejorada)
def buscar_oficinas(location, radius):
    try:
        # B칰squeda por tipo 'office'
        results = gmaps.places_nearby(
            location=location,
            radius=radius,
            type="office"
        ).get("results", [])
        
        # B칰squeda adicional por palabras clave comunes
        keywords = ["edificio oficinas", "torre empresarial", "centro de negocios"]
        for keyword in keywords:
            time.sleep(0.1)
            try:
                more_results = gmaps.places_nearby(
                    location=location,
                    radius=radius,
                    keyword=keyword
                ).get("results", [])
                results.extend(more_results)
            except:
                continue
        
        # Filtrar solo resultados que parezcan oficinas
        filtered = []
        for place in results:
            types = place.get("types", [])
            if 'office' in types or any(word in place['name'].lower() for word in ['oficina', 'edificio', 'torre', 'empresarial']):
                filtered.append(place)
        
        # Eliminar duplicados
        seen = set()
        return [x for x in filtered if x['place_id'] not in seen and not seen.add(x['place_id'])]
    except Exception as e:
        st.warning(f"Error al buscar oficinas: {str(e)}")
        return []

# Mapa interactivo
mapa = folium.Map(location=UBICACION_BOGOTA, zoom_start=13)
mapa_data = st_folium(mapa, width=1200, height=600)

# Manejo de ubicaci칩n
ubicacion_usuario = None
if mapa_data["last_clicked"]:
    ubicacion_usuario = (mapa_data["last_clicked"]["lat"], mapa_data["last_clicked"]["lng"])
    st.success(f"Ubicaci칩n seleccionada: {ubicacion_usuario}")

if opcion_busqueda == "Usar direcci칩n escrita" and direccion:
    try:
        geocode_result = gmaps.geocode(f"{direccion}, Bogot치, Colombia")
        if geocode_result:
            ubicacion_usuario = (
                geocode_result[0]["geometry"]["location"]["lat"],
                geocode_result[0]["geometry"]["location"]["lng"]
            )
            st.success(f"Ubicaci칩n encontrada: {ubicacion_usuario}")
    except Exception as e:
        st.error(f"Error al geocodificar: {str(e)}")

# Bot칩n de b칰squeda
if st.button("Buscar Lugares") and ubicacion_usuario:
    with st.spinner("Realizando b칰squeda..."):
        try:
            # Realizar todas las b칰squedas
            restaurantes = gmaps.places_nearby(
                location=ubicacion_usuario,
                radius=radio,
                type="restaurant"
            ).get("results", [])
            
            oficinas = buscar_oficinas(ubicacion_usuario, radio)
            transmilenio = buscar_transmilenio(ubicacion_usuario, radio)

            # Configuraci칩n de iconos
            iconos = {
                "restaurant": {"icon": "cutlery", "color": "red", "name": "Restaurante"},
                "office": {"icon": "briefcase", "color": "blue", "name": "Oficina"},
                "transmilenio": {"icon": "bus", "color": "green", "name": "Transmilenio"}
            }

            # Crear mapa
            mapa_resultados = folium.Map(location=ubicacion_usuario, zoom_start=15)
            
            # A침adir marcador de ubicaci칩n seleccionada
            folium.Marker(
                location=ubicacion_usuario,
                popup="Tu ubicaci칩n",
                icon=folium.Icon(color="black", icon="star")
            ).add_to(mapa_resultados)

            # A침adir resultados al mapa
            for lugar, tipo in [(r, "restaurant") for r in restaurantes] + \
                             [(o, "office") for o in oficinas] + \
                             [(t, "transmilenio") for t in transmilenio]:
                folium.Marker(
                    location=[lugar["geometry"]["location"]["lat"], lugar["geometry"]["location"]["lng"]],
                    popup=f"<b>{lugar['name']}</b><br>{iconos[tipo]['name']}",
                    icon=folium.Icon(color=iconos[tipo]["color"], icon=iconos[tipo]["icon"], prefix="fa")
                ).add_to(mapa_resultados)

            # A침adir heatmap
            heat_data = [
                [lugar["geometry"]["location"]["lat"], lugar["geometry"]["location"]["lng"]]
                for lugar in restaurantes + oficinas + transmilenio
            ]
            HeatMap(heat_data).add_to(mapa_resultados)

            # Mostrar resultados
            st.subheader("Resultados encontrados")
            col1, col2 = st.columns(2)
            with col1:
                st.markdown(f"**Restaurantes:** {len(restaurantes)}")
                st.markdown(f"**Oficinas:** {len(oficinas)}")
                st.markdown(f"**Estaciones de Transmilenio:** {len(transmilenio)}")
            
            with col2:
                folium_static(mapa_resultados)

            # Mostrar tabla de resultados
            st.subheader("Detalle de Lugares")
            datos = []
            for lugar, tipo in [(r, "Restaurante") for r in restaurantes] + \
                            [(o, "Oficina") for o in oficinas] + \
                            [(t, "Transmilenio") for t in transmilenio]:
                datos.append({
                    "Nombre": lugar["name"],
                    "Tipo": tipo,
                    "Direcci칩n": lugar.get("vicinity", "No disponible"),
                    "Rating": lugar.get("rating", "N/A"),
                    "Abreviatura": ", ".join([x for x in lugar.get("types", []) if not x.startswith("point_of_interest")][:3])
                })
            
            df = pd.DataFrame(datos)
            st.dataframe(df.sort_values(by="Tipo"), height=400)

        except Exception as e:
            st.error(f"Error en la b칰squeda: {str(e)}")
